import { AppService } from "../app.service";
import { Ctx, Hears, InjectBot, Message, On, Start, Update } from "nestjs-telegraf";
import { Telegraf } from "telegraf";
import { actionButtons } from "../buttons/app.buttons";
import { Context, TelegramUpdateMessage } from "../types/context.interface";
import { showTasks } from "../helpers/app.utilits";
import { User } from "../entities/user.entity";
import { UsersRepositories } from "./repositories/users-repositories";
import { Task } from "../entities/task.entity";

@Update()
export class AppUpdate {
  constructor(@InjectBot() private readonly bot: Telegraf<Context>,
              private readonly appService: AppService,
              private readonly usersRepo: UsersRepositories) {
  }


  @Start()
  async startCommand(ctx: Context) {
    const idTelegram = ctx.from.id;
    const firstName = ctx.from.first_name;
    const lastName = ctx.from.last_name;

    const foundUser = await this.usersRepo.findUserById(idTelegram);
    if (foundUser.firstName === "–ï–ª–µ–Ω–∞") {
      await ctx.reply("–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–∞—è –º–æ—è ü¶ù,–î–æ–±—Ä–æ –ø–æ—Ö–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç üóø", actionButtons());
    }
    if (!foundUser) {
      await ctx.reply("Hi! My good Friend ü¶ù, Welcome to chat üóø", actionButtons());
      const user = await User.createUser(idTelegram, firstName, lastName);
      await this.usersRepo.saveUser(user);
    } else {
      await ctx.replyWithHTML(`<b>Hi! üëãüèΩ</b> nice to meet you here: <b>${firstName}</b>`, actionButtons());
    }

  }

  @Hears("üìú –°–ø–∏—Å–æ–∫ –¥–µ–ª")
  async listTask(ctx: Context) {
    const idTelegram = ctx.from.id;
    const listTasks = await this.usersRepo.findTask(idTelegram);
    if (!listTasks) {
      await ctx.replyWithHTML(`–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á üìù`);
    } else {
      await ctx.replyWithHTML(showTasks(ctx, listTasks));
    }
  }

  @Hears("ü§™ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
  async doneTask(ctx: Context) {
    ctx.session.type = "done";
    await ctx.reply("–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞–Ω–∏—è:");
  }

  @Hears("üñä –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
  async editTask(ctx: Context) {
    ctx.session.type = "edit";
    await ctx.deleteMessage();
    await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞–Ω–∏—è: –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n" +
      "–í —Ñ–æ—Ä–º–∞—Ç–µ: <b>1_–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>");
  }

  @Hears("üìå –î–æ–±–∞–≤–∏—Ç—å")
  async addTask(ctx: Context) {
    ctx.session.type = "add";
    await ctx.deleteMessage();
    await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞–Ω–∏—è: –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n" +
      "–í —Ñ–æ—Ä–º–∞—Ç–µ: <b>1_–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>");
  }

  @Hears("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ")
  async deleteTask(ctx: Context) {
    ctx.session.type = "remove";
    await ctx.reply("–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞–Ω–∏—è:");
  }

  @Hears("‚è∞ –í—Ä–µ–º—è")
  async getTime(ctx: Context) {
    ctx.session.type = "time";

    // console.log(await ctx.sendMessage())
    await ctx.replyWithHTML(`<b>${new Date().toTimeString().split(" ")[0]}</b>`);
  }

  @Hears("üì∏ Random photo")
  async randomPhoto(ctx: Context) {
    ctx.session.type = "random";
    await ctx.replyWithPhoto({
      url: "https://picsum.photos/500/600/?random",
      filename: "kitten.jpg"
    });
  }

  @On("text")
  async getMessage(@Message("text") message: string,
                   @Ctx() ctx: Context,
                   @Ctx() payload: TelegramUpdateMessage
  ) {
    if (!ctx.session.type) return;
    const idTelegram = ctx.from.id;
    // if (payload.message.text === "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏?") {
    //   await ctx.deleteMessage();
    //   await ctx.replyWithHTML(`<b>${new Date().toLocaleDateString().split("/").join(":")}</b>`);
    //   return
    // }
    // if (payload.message.text.toLowerCase() === "–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?") {
    //   await ctx.replyWithHTML(`–¢–µ–±—è –∑–æ–≤—É—Ç <b>${payload.message.from.first_name}</b>`);
    //   return
    // }
    // if (payload.message.text.toLowerCase() === "–ø—Ä–∏–≤–µ—Ç") {
    //   await ctx.replyWithHTML(`Hi! My good Friend -- <b>${payload.message.from.first_name}</b>`);
    //   return;
    // }
    // if (payload.message.text.toLowerCase() === "hi") {
    //   await ctx.replyWithHTML(`Hi! My good Friend -- <b>${payload.message.from.first_name}</b>`);
    //   return;
    // }
    // if (payload.message.text.toLowerCase() === "hello") {
    //   await ctx.replyWithHTML(`Hi! My good Friend -- <b>${payload.message.from.first_name}</b>`);
    //   return;
    // }
    const [taskId, title] = message.split("_");
    if (!taskId) {
      await ctx.deleteMessage();
      await ctx.replyWithHTML(`<b>Sorry</b>, —è —Ç—É–ø–∞–≤–∞—Ç—ã–π –±–æ—Ç ü§ñ. \n\n     –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
      return;
    }
    if (ctx.session.type === "remove") {
      const task = await this.usersRepo.findTaskByIdTask(Number(taskId));
      if (!task) {
        await ctx.deleteMessage();
        await ctx.reply(`Not found with id: ${message}`);
        return;
      }
      await this.usersRepo.deleteTask(Number(taskId));
      const todos = await this.usersRepo.findTask(idTelegram);
      if (!todos) {
        await ctx.deleteMessage();
        await ctx.replyWithHTML(`–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á üìù`);
        return;
      }
      await ctx.replyWithHTML(showTasks(ctx, todos));
      return;
    }
    if (ctx.session.type === "done") {
      const task = await this.usersRepo.findTaskByIdTask(Number(taskId));
      if (!task) {
        await ctx.deleteMessage();
        await ctx.reply(`Not found with id: ${message}`);
        return;
      }
      task.isCompletedTask();
      await this.usersRepo.saveTask(task);
      const todos = await this.usersRepo.findTask(idTelegram);
      await ctx.replyWithHTML(showTasks(ctx, todos));
      return;
    }
    if (!title) {
      await ctx.deleteMessage();
      await ctx.replyWithHTML(`<b>Sorry</b>, —è —Ç—É–ø–∞–≤–∞—Ç—ã–π –±–æ—Ç ü§ñ. \n\n     –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
      return;
    }
    if (ctx.session.type === "add") {
      const user = await this.usersRepo.findUserById(idTelegram);
      const task = Task.createTask(Number(taskId), idTelegram, title, user);
      await this.usersRepo.saveTask(task);
      const todo = await this.usersRepo.findTask(idTelegram);
      if (!todo) {
        await ctx.deleteMessage();
        await ctx.reply(`Not found with id: ${message}`);
        return;
      }
      await ctx.replyWithHTML(showTasks(ctx, todo));
      return;
    }

    if (ctx.session.type === "edit") {
      const task = await this.usersRepo.findTaskByIdTask(Number(taskId));
      if (!task) {
        await ctx.deleteMessage();
        await ctx.reply(`Not found with id: ${message}`);
        return;
      }
      task.updateTask(title);
      await this.usersRepo.saveTask(task);
      const todos = await this.usersRepo.findTask(idTelegram);
      await ctx.replyWithHTML(showTasks(ctx, todos));
      return;
    }




    return



  }



}
